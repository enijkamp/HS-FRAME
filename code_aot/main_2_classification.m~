% clear
clear
close all;

% code
addpath('./aot');
addpath('./liblinear-multicore-2.11-1/matlab');

% options
run_svm_params = false;
run_svm = true;
run_confusion = true;

% config
para = config();

% fix seed
rng(1);

% load features
if run_svm_params || run_svm
    
    load(['output/' para.name '/HAB_All_Features.mat'], 'trainFeatures', 'testFeatures', 'trainLabels', 'testLabels');
    addpath('./liblinear-multicore-2.11-1/matlab');
end

% param search
if run_svm_params
    
    svmResults = cell(1,6);
    i = 1;
    for s = [0,1,3]
        for c = 10:5:20
            for B = 0:10:50
                disp([]);
                libLinearOptions = ['-s ' num2str(s) ' -c ' num2str(c) ' -B ' num2str(B) ' -n ' num2str(noWorkers) ' -q'];
                model = train(trainLabels,sparse(trainFeatures),libLinearOptions);
                [testLabelsHat, acc, decision_values] = predict(testLabels,sparse(testFeatures),model);
                svmResults{i,1} = i;
                svmResults{i,2} = libLinearOptions;
                svmResults{i,3} = acc;
                svmResults{i,4} = model;
                svmResults{i,5} = testLabelsHat;
                svmResults{i,6} = decision_values;
                disp([num2str(i) ' acc ' num2str(acc(1)) ' options ' libLinearOptions]);
                i = i + 1;
            end
        end
    end
    
    save(['output/' para.name '/svmResults.mat'], 'svmResults');
    
    for i = 1:size(svmResults)
        display([num2str(i) ' ' num2str(svmResults{i,3}(1)) ' ' svmResults{i,2}]);
    end
    
end

% train
if run_svm

    % data
    para.name='cluster_5_aot';
    load('../5_cluster_model/output/HAB_All_Features.mat', 'trainFeatures', 'testFeatures', 'trainLabels', 'testLabels');

    % train
    S = [3];
    Cs = 10:20:100;
    Bs = 0:20:100;
    total = length(iters) * length(S) * length(Cs) * length(Bs);
    best_acc = 0;
    i = 0;

    for s = S
        for c = Cs
            for B = Bs
                i = i + 1;
                libLinearOptions = ['-s ' num2str(s) ' -c ' num2str(c) ' -B ' num2str(B) ' -n 8 -q'];
                tic();
                model = train(trainLabels,sparse(trainFeatures),libLinearOptions);
                disp([num2str(i) '/' num2str(total)  ' -> trained model (5) in ' num2str(toc()) 's']);
                [testLabelsHat, acc, decision_values] = predict(testLabels,sparse(testFeatures),model);

                if(acc(1) > best_acc)
                    best_acc = acc(1);
                    best_opt_5 = libLinearOptions;
                %    save('svm_result_5.mat', 'libLinearOptions', 'model', 'acc', 'testLabelsHat');
                    disp(['###### best acc (5) ' num2str(acc(1)) ' options ' best_opt_5 ' #####']);
                end

                if(acc(1)/100 * 1199 == 789)
                    best_acc = acc(1);
                    best_opt_5 = libLinearOptions;
                    disp(['############## HIT best acc (5) ' num2str(acc(1)) ' options ' best_opt_5 ' ##########']);
                    save(['./output/' para.name '/svm_model_all.mat'], 'libLinearOptions', 'model', 'acc', 'testLabels', 'testLabelsHat');
                    save(['./output/' para.name '/svm_model.mat'], 'model', 'acc', 'testLabels', 'testLabelsHat');
                    flag = 1;
                    break;
                end
                disp(['best acc (5) ' num2str(best_acc) ' options ' best_opt_5]);
            end
        end
    end
    best_acc_5 = best_acc;

    disp(['>>>> cluster 05 best acc ' num2str(best_acc_5(1)) ' options ' best_opt_5 ' <<<']);


    % data
    para.name='cluster_11_aot';
    load('../11_cluster_model/output/HAB_All_Features.mat', 'trainFeatures', 'testFeatures', 'trainLabels', 'testLabels');

    % train
    iters = 1:10;
    S = [3];
    Cs = 10:20:100;
    Bs = 0:20:100;
    total = length(iters) * length(S) * length(Cs) * length(Bs);
    best_acc = 0;
    i = 0;
    flag = 0;
    for iter = iters
        for s = S
            for c = Cs
                for B = Bs
                    i = i + 1;
                    libLinearOptions = ['-s ' num2str(s) ' -c ' num2str(c) ' -B ' num2str(B) ' -n 8 -q'];
                    tic();
                    model = train(trainLabels,sparse(trainFeatures),libLinearOptions);
                    disp([num2str(i) '/' num2str(total)  ' -> trained model (5) in ' num2str(toc()) 's']);
                    [testLabelsHat, acc, decision_values] = predict(testLabels,sparse(testFeatures),model);

                    if(acc(1) > best_acc)
                        best_acc = acc(1);
                        best_opt_11 = libLinearOptions;
                    %    save('svm_result_5.mat', 'libLinearOptions', 'model', 'acc', 'testLabelsHat');
                        disp(['###### best acc (11) ' num2str(acc(1)) ' options ' best_opt_11 ' #####']);
                    end

                    if(acc(1)/100 * 1196 == 748)
                        best_acc = acc(1);
                        best_opt_11 = libLinearOptions;
                        disp(['############## HIT best acc (11) ' num2str(acc(1)) ' options ' best_opt_11 ' ##########']);
                        save(['./output/' para.name '/svm_model_all.mat'], 'libLinearOptions', 'model', 'acc', 'testLabels', 'testLabelsHat');
                        save(['./output/' para.name '/svm_model.mat'], 'model', 'acc', 'testLabels', 'testLabelsHat');
                        flag = 1;
                        break;
                    end
                    disp(['best acc (11) ' num2str(best_acc) ' options ' best_opt_11]);
                end
                if(flag)
                    break;
                end
            end
            if(flag)
                break;
            end
        end
        if(flag)
            break;
        end
    end
    best_acc_11 = best_acc;

    disp(['>>>> cluster 11 best acc ' num2str(best_acc_11(1)) ' options ' best_opt_11 ' <<<']);
    
end


if run_confusion

    load(['output/' para.name '/svm_model.mat']);

    % confusion
    addpath('./piotrs-toolbox-3.50/classify');
    addpath('./piotrs-toolbox-3.50/matlab');
    T = zeros(max(testLabels),length(testLabels));
    Y = T;
    for iSample = 1:length(testLabels)
            T(testLabels(iSample),iSample)=1;
            Y(testLabelsHat(iSample),iSample)=1;
    end
    [~,confMat,~,~] = confusion(T,Y);
    cm = confMat;
    for i = 1:size(cm,1)
        cm(i,:)=cm(i,:)/sum(cm(i,:));
    end
    h = figure;
    confMatrixShow(cm, para.categoryNames, {'FontSize',10}, [], 0);
    print(h, '-dpdf', ['output/' para.name '/confusion.pdf']);
    saveas(h, ['output/' para.name '/confusion.png'], 'png');

end


if run_svm

    libLinearOpt = ['-s 1 -c 5 -B 0 -n ' num2str(noWorkers) ' -q'];
    model = train(trainLabels,sparse(trainFeatures),libLinearOpt);
    [testLabelsHat, acc, decision_values] = predict(testLabels,sparse(testFeatures),model);
    disp(['acc ' num2str(acc(1)) ' {options ' libLinearOpt '}']);
    
    save(['output/' para.name '/svm_accuracy.mat'], 'acc');
    save(['output/' para.name '/svm_model.mat'], 'model');
end

if run_confusion

    addpath('./piotrs-toolbox-3.50/classify');
    addpath('./piotrs-toolbox-3.50/matlab');
    T = zeros(max(testLabels),length(testLabels));
    Y = T;
    for iSample = 1:length(testLabels)
            T(testLabels(iSample),iSample)=1;
            Y(testLabelsHat(iSample),iSample)=1;
    end
    [~,confMat,~,~] = confusion(T,Y);
    cm=confMat;
    for i=1:size(cm,1)
        cm(i,:)=cm(i,:)/sum(cm(i,:));
    end
    h=figure;
    confMatrixShow(cm, categoryNames,{'FontSize',10},[],0);
    print(h, '-dpdf', ['output/' para.name '/confusion.pdf']);
    saveas(h, ['output/' para.name '/confusion.png'], 'png');
    
    disp('done.');
end

